<?php

namespace backend\models;

use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;

/**
 * This is the model class for table "snippet_code".
 *
 * @property integer $id
 * @property string $name
 * @property string $code
 * @property string $description
 * @property string $portal
 * @property integer $snippet_id
 *
 * @property Block[] $blocks
 * @property string $url
 * @property Snippet $snippet
 */
class SnippetCode extends CustomModel
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'snippet_code';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'snippet_id'], 'required'],
            [['code', 'description'], 'string'],
            [['snippet_id'], 'integer'],
            [['name', 'portal'], 'string', 'max' => 50],
            [['name', 'snippet_id'], 'unique', 'targetAttribute' => ['name', 'snippet_id'], 'message' => 'The combination of Name and Snippet ID has already been taken.']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'code' => 'Kód',
            'description' => 'Popis',
            'portal' => 'Alternatívu je možné použiť na portály',
            'snippet_id' => 'Snippet ID',
            'blocks' => 'Bloky'
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        $this->getMainFile(true);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSnippet()
    {
        return $this->hasOne(Snippet::className(), ['id' => 'snippet_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBlocks()
    {
        return $this->hasMany(Block::className(), ['snippet_code_id' => 'id']);
    }

    /**
     * @return string
     */
    public function getUrl()
    {
        return Url::to(
        [
            '/snippet/update/',
            'id' => $this->snippet_id,
            '#' => 'code' . $this->id
        ]);
    }

    /** Vrati cestu k nacachovanemu suboru, kde su ulozene informacie o kode snippetu a jeho premennych
     * @param bool $reload - ak true, tak sa subor nanovo vytvori
     * @return string
     */
    public function getMainFile($reload = false)
    {
        $path = $this->snippet->getCacheDirectory() . 'code' . $this->id . '.php';

        if (!file_exists($path) || $reload) {
            Yii::$app->cacheEngine->writeToFile($path, 'w+', $this->code);
        }

        return $path;
    }

}
