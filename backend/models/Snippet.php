<?php

namespace backend\models;

use common\models\User;
use Yii;

/**
 * This is the model class for table "snippet".
 *
 * @property integer $id
 * @property string $name
 * @property string $description
 * @property string $section_id
 * @property string $section_class
 * @property string $section_style
 * @property string $column_id
 * @property string $column_class
 * @property string $column_style
 * @property string $last_edit
 * @property bool $type
 * @property integer $last_edit_user
 *
 * @property User $lastEditUser
 * @property SnippetCode[] $snippetCodes
 * @property SnippetVar[] $snippetFirstLevelVars
 * @property SnippetVar[] $snippetVariables
 */
class Snippet extends CustomModel implements ICacheable
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->type = 0;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'snippet';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'type'], 'required'],
            [['last_edit_user'], 'integer'],
            [['last_edit'], 'safe'],
            [['name'], 'string', 'max' => 50],
            [['description'], 'string'],
            [
                ['section_id', 'section_class', 'section_style', 'column_id', 'column_class', 'column_style'],
                'string',
                'max' => 30
            ],
            [['name'], 'unique']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'NÃ¡zov',
            'description' => 'Popis snippetu',
            'section_id' => 'Sekcia ID',
            'section_class' => 'Sekcia Class',
            'section_style' => 'Sekcia Style',
            'column_id' => 'Column ID',
            'column_class' => 'Column Class',
            'column_style' => 'Column Style',
            'last_edit' => 'Last Edit',
            'last_edit_user' => 'Last Edit User',
        ];
    }

    /**
     * Event fired before save model. User id is set as last user who edits model.
     * @param bool $insert true if save is insert type, false if update.
     * @return bool
     */
    public function beforeSave($insert)
    {
        $userId = Yii::$app->user->identity->id;
        $this->last_edit_user = $userId;

        return parent::beforeSave($insert);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLastEditUser()
    {
        return $this->hasOne(User::className(), ['id' => 'last_edit_user']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSnippetCodes()
    {
        if (!isset($this->snippetCodes)) {
            $this->snippetCodes = $this->hasMany(SnippetCode::className(), ['snippet_id' => 'id'])->all();
        }

        return $this->snippetCodes;
    }

    public function setSnippetCodes($value)
    {
        $this->snippetCodes = $value;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSnippetVariables()
    {
        return $this->hasMany(SnippetVar::className(), ['snippet_id' => 'id']);
    }

    /**
     * SnippetVars with no parents (first level - not nested).
     * @return \yii\db\ActiveQuery
     */
    public function getSnippetFirstLevelVars()
    {
        if (!isset($this->snippetFirstLevelVars)) {
            $this->snippetFirstLevelVars = $this->getSnippetVariables()->where(['parent_id' => null])->all();
        }

        return $this->snippetFirstLevelVars;
    }

    public function setSnippetFirstLevelVars($value)
    {
        $this->snippetFirstLevelVars = $value;
    }

    /** Vrati cestu k adresaru, kde su ulozene nacachovane veci k snippetu
     * @return string
     */
    public function getMainDirectory()
    {
        $path = Yii::$app->dataEngine->getSnippetsDirectory() . 'snippet' . $this->id . '/';

        if (!file_exists($path)) {
            mkdir($path, 0777, true);
        }

        return $path;
    }

    /** Metoda na vratenie cesty k hlavnemu suboru pre dany snippet (obsahuje premenne snippetu
     * s default hodnotami a nastavenia snippetu)
     * @param bool $reload
     * @return string
     */
    public function getMainCacheFile($reload = false)
    {
        $path = $this->getMainDirectory() . 'snippet.php';

        if (!file_exists($path) || $reload) {
            $dataEngine = Yii::$app->dataEngine;

            $buffer = '<?php ' . PHP_EOL;

            $buffer .= '$tempObject = (object) array(' . PHP_EOL;

            foreach ($this->snippetVariables as $snippetVar) {
                $buffer .= '\'' . $snippetVar->identifier . '\' => ' . $snippetVar->getDefaultValueAsString() . ',' . PHP_EOL;
            }

            $buffer .= ');' . PHP_EOL;

            $buffer .= '$snippet = new ObjectBridge($tempObject, \'snippet' . $this->id . '\');' . PHP_EOL;

            $buffer .= '?>' . PHP_EOL;

            $dataEngine->writeToFile($path, 'w+', $buffer);
        }

        return $path;
    }

    public function resetAfterUpdate()
    {
        $this->getMainCacheFile(true);

        /* @var $snippetCode \backend\models\SnippetCode */
        foreach ($this->snippetCodes as $snippetCode) {
            /* @var $block \backend\models\Block */
            foreach ($snippetCode->blocks as $block) {
                $block->resetAfterUpdate();
            }
        }
    }

    /** Metoda na nacitanie potomkovskych poloziek - obsahuje rekurziu
     * @param $propertyIdentifier
     * @param $data
     */
    public function loadChildren($propertyIdentifier, $data)
    {
        foreach ($data as $index => $item) {
            $this->loadFromData($propertyIdentifier, $item, $index,
                SnippetVar::className());

            if (key_exists('SnippetVarDefaultValue', $item)) {
                foreach ($item['SnippetVarDefaultValue'] as $indexDefaultValue => $defaultValue) {
                    $this->{$propertyIdentifier}[$index]->loadFromData('defaultValues', $defaultValue,
                        $indexDefaultValue, SnippetVarDefaultValue::className());
                }
            }

            if (key_exists('Children', $item)) {
                $this->{$propertyIdentifier}[$index]->loadChildren('children', $item['Children']);
            }
        }
    }

    /**
     * Metoda na ulozenie potomkovskych poloziek - rekurzia v pripade ze potomok ma dalsich potomkov
     * @param $propertyIdentifier - identifikator zoznamu, ktory obsahuje potomkov
     * @param $globalParentPropertyIdentifier - identifikator globalneho rodicovskeho atributu (block_id, portal_id)
     * @throws \yii\base\Exception
     */
    public function saveChildren($propertyIdentifier, $globalParentPropertyIdentifier)
    {
        foreach ($this->{$propertyIdentifier} as $childModel) {

            if ($childModel->removed) {
                $childModel->delete();
                continue;
            }

            if (!($childModel->validate() && $childModel->save())) {
                throw new \yii\base\Exception;
            }

            foreach($childModel->defaultValues as $defaultValue) {
                $defaultValue->snippet_var_id = $childModel->id;

                if ($defaultValue->removed) {
                    $defaultValue->delete();
                    continue;
                }

                if (!($defaultValue->validate() && $defaultValue->save())) {
                    throw new \yii\base\Exception;
                }
            }

            $childModel->saveChildren('children', $globalParentPropertyIdentifier);
        }
    }
}
