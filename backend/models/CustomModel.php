<?php
/**
 * Created by PhpStorm.
 * User: MarekHvolka
 * Date: 21.06.16
 * Time: 18:10
 */

namespace backend\models;


/*
 * @property bool $existing Indicates if model already exists.
 * @property bool $removed Indicates if model has to be removed
 */

class CustomModel extends \yii\db\ActiveRecord
{
    public $existing;
    public $removed = true;

    public function load($data, $formName = null)
    {
        $this->removed = false;

        return parent::load($data, $formName); // TODO: Change the autogenerated stub
    }

    /*public static function loadFromData(&$models, $item, $index, $modelClassName)
    {
        if (!empty($models[$index])) {
            $models[$index]->load($item, '');
            $models[$index]->existing = $item['existing'];
            $models[$index]->removed = false;
        }
        else {

            $models[$index] = new $modelClassName();
            $models[$index]->load($item, '');
            $models[$index]->removed = false;
        }
    }*/

    /** Metoda, ktora nacita hodnoty atributov polozky $item do pola $arrayProperty na indexe $index
     * ak polozka neexistuje na danom indexe, tak prida do pola novu
     * @param $arrayProperty - identifikator pre pole, do ktoreho pridavame polozky
     * @param $item
     * @param $index
     * @param $modelClassName
     */
    public function loadFromData($arrayProperty, $item, $index, $modelClassName)
    {
        if (!empty($this->{$arrayProperty}[$index])) {
            $this->{$arrayProperty}[$index]->load($item, '');
            $this->{$arrayProperty}[$index]->existing = $item['existing'];
            $this->{$arrayProperty}[$index]->removed = false;
        }
        else {
            $this->{$arrayProperty}[$index] = new $modelClassName();
            $this->{$arrayProperty}[$index]->load($item, '');
            $this->{$arrayProperty}[$index]->removed = false;
        }
    }

    /** Metoda na nacitanie potomkovskych poloziek - obsahuje rekurziu
     * @param $propertyIdentifier
     * @param $data
     */
    public function loadChildren($propertyIdentifier, $data)
    {
        foreach ($data as $index => $item) {
            $this->loadFromData($propertyIdentifier, $item, $index,
                SnippetVar::className());

            if (isset($item[$propertyIdentifier]))
                $this->loadChildren($propertyIdentifier, $item[$propertyIdentifier]);
        }
    }

    private function saveChildren($propertyIdentifier)
    {
        foreach($this->{$propertyIdentifier} as $snippetVar) {
            $snippetVar->parent_id = $this->id;
            if (!($snippetVar->validate() && $snippetVar->save()))
                throw new \yii\base\Exception;

            $this->saveChildren('children');
        }
    }

    public function beforeSave($insert)
    {
        if ((!$this->existing) && (isset($this->id))) {
            //unset($this->id);
        }

        if ($this->removed) {
            $this->delete();
            return true;
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}