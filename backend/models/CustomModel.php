<?php
/**
 * Created by PhpStorm.
 * User: MarekHvolka
 * Date: 21.06.16
 * Time: 18:10
 */

namespace backend\models;

/**
 * @property bool $removed Indicates if model has to be removed
 */

use common\models\User;
use Exception;
use Yii;
use yii\db\ActiveRecord;

/** Vlastna trieda, z ktorej dedia vsetky modely. Obsahuje veci, potrebne pre ukladanie a nacitavanie dat
 * Class CustomModel
 * @package backend\models
 */
class CustomModel extends ActiveRecord
{
    public $removed = false;
    public $myOldAttributes = array();

    public function load($data, $formName = null)
    {
        $this->myOldAttributes = $this->getAttributes();
        return parent::load($data, $formName); // TODO: Change the autogenerated stub
    }

    /** Metoda, ktora nacita hodnoty atributov polozky $item do pola $arrayProperty na indexe $index
     * ak polozka neexistuje na danom indexe, tak prida do pola novu
     * @param $arrayProperty - identifikator pre pole, do ktoreho pridavame polozky
     * @param $item
     * @param $index
     * @param $modelClassName
     */
    public function loadFromData($arrayProperty, $item, $index, $modelClassName)
    {
        if (empty($this->{$arrayProperty}[$index])) {
            $this->{$arrayProperty}[$index] = new $modelClassName();
        }

        if (key_exists('removed', $item)) {
            $this->{$arrayProperty}[$index]->removed = $item['removed'];
        }

        $this->{$arrayProperty}[$index]->load($item, '');
    }

    /** Metoda na nacitanie potomkovskych poloziek - obsahuje rekurziu
     * @param $propertyIdentifier
     * @param $data
     */
    public function loadChildren($propertyIdentifier, $data)
    {
        foreach ($data as $index => $item) {
            $this->loadFromData($propertyIdentifier, $item, $index,
                SnippetVar::className());

            if (key_exists('Children', $item)) {
                $this->{$propertyIdentifier}[$index]->loadChildren('children', $item['Children']);
            }
        }
    }

    /**
     * Metoda na ulozenie potomkovskych poloziek - rekurzia v pripade ze potomok ma dalsich potomkov
     * @param $propertyIdentifier - identifikator zoznamu, ktory obsahuje potomkov
     * @param $globalParentPropertyIdentifier - identifikator globalneho rodicovskeho atributu (block_id, portal_id)
     * @throws \yii\base\Exception
     */
    public function saveChildren($propertyIdentifier, $globalParentPropertyIdentifier)
    {
        /* @var $childModel CustomModel */
        foreach ($this->{$propertyIdentifier} as $childModel) {
            $childModel->parent_id = $this->id;

            $childModel->{$globalParentPropertyIdentifier} = $this->{$globalParentPropertyIdentifier};

            if ($childModel->removed) {
                $childModel->delete();
                continue;
            }

            $childModel->validateAndSave();

            $childModel->saveChildren('children', $globalParentPropertyIdentifier);
        }
    }

    public function logException($exception, $type)
    {
        $systemException = new SystemException();
        $systemException->type = $type;

        $systemException->source_name = property_exists($exception,
            'sourceName') ? $exception->sourceName : $exception->getFile();

        $systemException->source_code = property_exists($exception,
            'sourceCode') ? $exception->sourceCode : file_get_contents($systemException->source_name);

        $systemException->source_line = property_exists($exception,
            'sourceLine') ? $exception->sourceLine : $exception->getLine();

        $systemException->message = $exception->getMessage();

        switch ($this->className()) {
            case Product::className() :
                $systemException->product_id = $this->id;
                break;

            case Portal::className() :
                $systemException->portal_id = $this->id;
                break;

            case Page::className() :
                $systemException->page_id = $this->id;
                break;

            case Block::className() :
                $systemException->block_id = $this->id;
                break;
        }

        $systemException->save();

        if (Yii::$app->user->identity->portal) {
            throw $exception;
        }
    }

    public function removeException()
    {
        switch ($this->className()) {
            case Product::className() :
                SystemException::deleteAll(['product_id' => $this->id]);
                break;
            case Portal::className() :
                SystemException::deleteAll(['portal_id' => $this->id]);
                break;
            case Page::className() :
                SystemException::deleteAll(['page_id' => $this->id]);
                break;
            case Block::className() :
                SystemException::deleteAll(['block_id' => $this->id]);
                break;
        }
    }

    /**
     * Event fired before save model. User id is set as last user who edits model.
     * @param bool $insert true if save is insert type, false if update.
     * @return bool
     */
    public function beforeSave($insert)
    {
        if (key_exists('last_edit_user', $this->attributes)) {
            if (isset(Yii::$app->user) && isset(Yii::$app->user->identity)) {
                $userId = Yii::$app->user->identity->id;
                $this->last_edit_user = $userId;
            }
        }
        return parent::beforeSave($insert);
    }

    public function setOutdated()
    {
        $this->outdated = 1;
        $this->save();
    }

    public function setActual()
    {
        $this->outdated = 0;
        $this->save();
        $this->removeException();
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLastEditUser()
    {
        return $this->hasOne(User::className(), ['id' => 'last_edit_user']);
    }

    /** Metoda, ktora urci, ci bol model zmeneny a je potrebne resetnut jeho cache
     * @return bool
     */
    public function isChanged()
    {
        foreach ($this->myOldAttributes as $index => $oldAttribute) {
            if ($oldAttribute != $this->{$index} && $index != 'last_edit' && $index != 'last_edit_user') {
                return true;
            }
        }
        return false;
    }

    /** Pomocna metoda na validaciu a pripadne ulozenie
     * @throws Exception
     */
    public function validateAndSave()
    {
        if (!($this->validate() && $this->save())) {
            throw new Exception;
        }
    }

    /** Validator, ktory zabezpeci, ze aspon jeden stlpec bude vyplneny
     * @param $attribute
     * @param $params
     * @return bool
     */
    public function atLeastOne($attribute, $params)
    {
        if (!empty($this->{$attribute}))
            return true;

        foreach ($params as $param) {
            if (!empty($this->{$param}))
                return true;
        }

        return false;
    }
}