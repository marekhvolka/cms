<?php
/**
 * Created by PhpStorm.
 * User: MarekHvolka
 * Date: 21.06.16
 * Time: 18:10
 */

namespace backend\models;

/*
 * @property bool $existing Indicates if model already exists.
 * @property bool $removed Indicates if model has to be removed
 */

class CustomModel extends \yii\db\ActiveRecord
{
    public $existing;
    public $removed = true;

    public function load($data, $formName = null)
    {
        $this->removed = false;
        return parent::load($data, $formName); // TODO: Change the autogenerated stub
    }

    /** Metoda, ktora nacita hodnoty atributov polozky $item do pola $arrayProperty na indexe $index
     * ak polozka neexistuje na danom indexe, tak prida do pola novu
     * @param $arrayProperty - identifikator pre pole, do ktoreho pridavame polozky
     * @param $item
     * @param $index
     * @param $modelClassName
     */
    public function loadFromData($arrayProperty, $item, $index, $modelClassName)
    {
        if (!empty($this->{$arrayProperty}[$index])) {
            $this->{$arrayProperty}[$index]->load($item, '');
            //$this->{$arrayProperty}[$index]->existing = $item['existing'];
            $this->{$arrayProperty}[$index]->removed = false;
        }
        else {
            $this->{$arrayProperty}[$index] = new $modelClassName();
            $this->{$arrayProperty}[$index]->load($item, '');
            $this->{$arrayProperty}[$index]->removed = false;
        }
    }

    /** Metoda na nacitanie potomkovskych poloziek - obsahuje rekurziu
     * @param $propertyIdentifier
     * @param $data
     */
    public function loadChildren($propertyIdentifier, $data)
    {
        foreach ($data as $index => $item) {
            $this->loadFromData($propertyIdentifier, $item, $index,
                SnippetVar::className());

            if (key_exists('Children', $item))
                $this->{$propertyIdentifier}[$index]->loadChildren('children', $item['Children']);
        }
    }

    /**
     * Metoda na ulozenie potomkovskych poloziek - rekurzia v pripade ze potomok ma dalsich potomkov
     * @param $propertyIdentifier - identifikator zoznamu, ktory obsahuje potomkov
     * @param $globalParentPropertyIdentifier - identifikator globalneho rodicovskeho atributu (block_id, portal_id)
     * @throws \yii\base\Exception
     */
    public function saveChildren($propertyIdentifier, $globalParentPropertyIdentifier)
    {
        foreach($this->{$propertyIdentifier} as $childModel) {
            $childModel->parent_id = $this->id;

            $childModel->{$globalParentPropertyIdentifier} = $this->{$globalParentPropertyIdentifier};

            if ($childModel->removed) {
                $childModel->delete();
                continue;
            }

            if (!($childModel->validate() && $childModel->save()))
                throw new \yii\base\Exception;

            $childModel->saveChildren('children', $globalParentPropertyIdentifier);
        }
    }

    public function beforeSave($insert)
    {
        if ((!$this->existing) && (isset($this->id))) {
            //unset($this->id);
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}