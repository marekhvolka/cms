<?php

namespace backend\models;

use common\models\User;
use Yii;

/**
 * This is the model class for table "template".
 *
 * @property integer $id
 * @property string $name
 * @property string $description
 * @property string $identifier
 * @property string $last_edit
 * @property integer $last_edit_user
 *
 * @property CssScheme[] $cssSchemes
 * @property Portal[] $portals
 * @property User $lastEditUser
 */
class Template extends CustomModel
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'template';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'identifier'], 'required'],
            [['active', 'last_edit_user'], 'integer'],
            [['description'], 'string'],
            [['last_edit'], 'safe'],
            [['name'], 'string', 'max' => 50],
            [['identifier'], 'string', 'max' => 100]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Názov',
            'description' => 'Popis',
            'identifier' => 'Adresár šablóny',
            'last_edit' => 'Posledná zmena',
            'last_edit_user' => 'Naposledy editoval',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPortals()
    {
        return $this->hasMany(Portal::className(), ['template_id' => 'id']);
    }

    public function getCssSchemes()
    {
        if (!isset($this->cssSchemes)) {

            $this->cssSchemes = array();
            chdir($this->getCssSchemeDirectoryPath());

            foreach (glob('*.css') as $file) {
                $item = new CssScheme();
                $item->name = $file;
                $item->template_id = $this->id;

                $this->cssSchemes[] = $item;
            }
        }

        return $this->cssSchemes;
    }

    public function setCssSchemes($value) { $this->cssSchemes = $value; }

    public function getCssSchemeDirectoryPath($forWeb = false)
    {
        return $this->getMainDirectory($forWeb) . 'css/';
    }

    public function getMainDirectory($forWeb = false)
    {
        return Yii::$app->dataEngine->getTemplatesDirectory($forWeb) . $this->identifier . '/';
    }

    public function getIndexPath($forWeb = false)
    {
        return $this->getMainDirectory($forWeb) . '/index.php';
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        if (!$insert && $this->identifier != $this->myOldAttributes['identifier']) {//premenoval sa adresar
            rename(Yii::$app->dataEngine->getTemplatesDirectory() . $this->myOldAttributes['identifier'],
                $this->getMainDirectory());
        }

        if (!file_exists($this->getMainDirectory())) {
            mkdir($this->getMainDirectory(), 0777, true);
        }
    }

    public function afterDelete()
    {
        parent::afterDelete(); // TODO: Change the autogenerated stub

        system('rm -rf ' . escapeshellarg($this->getMainDirectory()), $retval);
    }
}
